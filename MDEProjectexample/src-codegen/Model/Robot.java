// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package Model;


import Model.IMission;
import Model.IRobot;
import Model.State;
import Model.Strategy;
import project.AbstractRobotSimulator;
import project.Point;
import project.RobotAvatar;

import java.lang.String;
import java.util.List;
import Controller.Observer;

/************************************************************/
/**
 * 
 */
public class Robot implements IRobot,Observable {
	
	public Robot(String name, Point position, Strategy strategy, State state, IMission mission) {
		this.name = name;
		this.position = position;
		this.strategy = strategy;
		this.state = state;
		this.mission = mission;
		this.robotAvatar = new RobotAvatar(position, name);
	}
	/**
	 * 
	 */
	private String name;
	/**
	 * 
	 */
	private Point position;
	/**
	 * 
	 */
	private Strategy strategy;
	/**
	 * 
	 */
	private State state;
	/**
	 * 
	 */
	private IMission mission;
	/**
	 * 
	 */
	private List<Observer> observers;
	/**
	 * 
	 */
	public List<Area> areas;
	/**
	 * 
	 */
	private int reward;
	
	private RobotAvatar robotAvatar;


	/**
	 * 
	 * @return 
	 */
	public Point getPosition() {
		return this.robotAvatar.getPosition();
		
	}

	/**
	 * 
	 * @return 
	 */
	public Strategy getStrategy() {
		return this.strategy;
	}

	/**
	 * 
	 */
	private void move() {
	}

	/**
	 * 
	 * @return 
	 */
	public String getState() {
		return this.state.toString();
	}

	/**
	 * 
	 * @return 
	 */
	public IMission getMission() {
		return this.mission;
	}

	/**
	 * 
	 * @return 
	 */
	public String getName() {
		return this.robotAvatar.getName();
		
	}

	/**
	 * 
	 * @param mission 
	 */
	public void setMission(IMission mission) {
		this.mission = mission;
		notifyAllObservers();
	}

	/**
	 * 
	 * @param strategy 
	 */
	public void setStrategy(Strategy strategy) {
		this.strategy = strategy;
		notifyAllObservers();
	}

	/**
	 * 
	 * @param position 
	 */
	public void setPosition(Point position) {
		this.robotAvatar.setDestination(position);
		notifyAllObservers();
	}

	/**
	 * 
	 */
	public void notifyAllObservers() {
		
		for(Observer observer :observers) {
			observer.update(this);
			
		}
	}

	/**
	 * 
	 * @param observer 
	 */
	public void attach(Observer observer) {
		observers.add(observer);
	}


	@Override
	public void addReward(int reward) {
		this.reward += reward;
		
	}
	
	/**
	 * 
	 * @return 
	 */
	public Strategy useStrategy() {
		return null;
	}
	
	/**
	 * 
	 */
	public RobotAvatar getRobot() {
		return robotAvatar;
		
	}
	public void setState(State state) {
		this.state = state;
	}

};
