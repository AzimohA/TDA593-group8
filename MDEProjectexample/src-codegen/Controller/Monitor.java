// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package Controller;

import java.util.HashMap;
import java.util.List;
import java.util.Set;

import Controller.Observer;
import Controller.ViewFactory;
import Model.Area;
import Model.Assignment5Mission;
import Model.Environment;
import Model.IMission;
import Model.IRobot;
import Model.IMission;
import Model.Robot;
import Model.State;
import Model.StopStrategy;
import Model.Strategy;
import project.AbstractRobotSimulator;
import project.AbstractSimulatorMonitor;
import project.Point;
import project.RobotAvatar;
import project.SimulatorMonitor;

/************************************************************/
/**
 * 
 */
public class Monitor extends AbstractSimulatorMonitor<RobotAvatar> implements Observer {
	
	/**
	 * 
	 */
	private ViewFactory viewfactory;
	private IRobot robot;
	private HashMap <Robot,RobotAvatar> robotAvatarModels;
	Environment environment;
	
	public Monitor(Set<RobotAvatar> robotAvatars, Environment environment) {
		super(robotAvatars, environment);
		this.environment = environment;
		this.robotAvatarModels = new HashMap<Robot, RobotAvatar>();
		setUpRobotAvatars(robotAvatars);
		
	}
	
	public RobotAvatar getRobotAvatar(IRobot robot) {
		return robotAvatarModels.get(robot);
	}

	/**
	 * 
	 * @param robot 
	 */
	
	private void setUpRobotAvatars(Set<RobotAvatar> robotAvatars) {
		for (RobotAvatar rob:robotAvatars) {
			IRobot modelRobot = getRobotAvatarParams(rob);
			modelRobot.attach(this);
			this.robotAvatarModels.put((Robot) modelRobot, rob);
			createNavigate(modelRobot, environment.getAreas());
		}
		
	}
	
	private void createNavigate(IRobot robot, List<Area> area) {
		//Must create threads to run move
		new Thread(new Navigate(robot, area)).start();
	}
	
	private void updateState(IRobot robot) {
		//this.robot.setState(robot.getState());
	}

	/**
	 * 
	 */
	private void updateView(IRobot robot) {
	}

	/**
	 * 
	 * @param robot 
	 */
	private void updatePosition(IRobot robot) {
		RobotAvatar robotAvatar = robotAvatarModels.get(robot);
		robotAvatar.setDestination(robot.getPosition());
	}
	
	/**
	 * returns true if the current position of the robot is the same as the parameter
	 */
	public Boolean isAtPosition(IRobot robot, Point point) {
		return robotAvatarModels.get(robot).isAtPosition(point);
	}
	
	/**
	 * 
	 * @param robot 
	 */
	private void updateMission(IRobot robot) {
	}


	@Override
	public void update(IRobot robot) {
		updateState(robot);
		updateView(robot);
		updatePosition(robot);
		updateMission(robot);
		
	}
	
	private Robot getRobotAvatarParams(RobotAvatar robAvatar) {
		IMission mission = new Assignment5Mission(robAvatar.getName(), null); //HARDCODE
		Strategy strategy = new StopStrategy(mission); //HARDCODE
		
		
		return new Robot(robAvatar.getName(), robAvatar.getPosition(), strategy, State.OKAY, mission, this); //robot probably doesn't need strategy or mission, as navigate keeps track of these
	}


	@Override
	public void update(RobotAvatar arg0) {
		// TODO Auto-generated method stub
		
	}

	
};
